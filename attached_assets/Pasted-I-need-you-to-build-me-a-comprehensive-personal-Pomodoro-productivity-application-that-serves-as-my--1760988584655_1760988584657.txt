I need you to build me a comprehensive personal Pomodoro productivity application that serves as my complete time management and task tracking system. The application should feature a fully functional Pomodoro timer at its core with customizable work and break durations, defaulting to the classic 25-minute work sessions and 5-minute breaks. The timer should automatically alternate between work and break periods, with smooth countdown displays updating every second. When each session completes, the app should play an audible alarm sound to notify me, and the system should automatically log that completed session with a timestamp for analytics purposes.
The application must include a complete task management system where I can add my daily tasks through a text input field, mark them as complete with visual checkboxes that turn green when checked, and delete tasks I no longer need. Completed tasks should display with strikethrough text and a different background color to clearly distinguish them from pending work. The task list should show real-time counters of how many tasks I've completed versus how many remain, and this data should feed into the analytics dashboard.
I want extensive theme customization with at least five distinct color schemes including purple, blue, green, pink, and orange. Each theme should be a complete design system that changes the primary colors throughout the entire application including buttons, backgrounds, accent text, and even the chart colors in the analytics section. The theme selector should display as clickable colored circles with a visual indicator showing which theme is currently active, and theme changes should apply instantly across the entire interface without requiring a page refresh.
The app needs robust audio capabilities including an alarm system that triggers automatically when timers complete, plus integrated background music functionality. I want multiple music options like lo-fi beats, nature sounds, ambient music, and focus beats that users can select from a dropdown menu. Include playback controls with play and pause buttons, and volume adjustment capabilities. The music system should be designed so it can easily integrate with external audio sources, specifically YouTube playlists and Spotify. For YouTube integration, I want the ability to embed playlists using either the YouTube IFrame API for advanced control or simple iframe embeds for quick implementation, using popular study music channels like Lofi Girl's 24/7 radio stream. For Spotify, the system should support either the Spotify Web Playback SDK for full control or simple playlist embeds that work without authentication. The audio infrastructure should be flexible enough to switch between these different sources.
A critical feature is the motivational quote system that displays inspirational productivity quotes throughout the app. The quotes should rotate automatically every time a Pomodoro session completes, pulling from a curated collection of at least ten motivational phrases. Display these quotes in an attractive card with gradient backgrounds and special styling to make them visually prominent. The quotes should appear at natural transition points in the workflow to provide mental encouragement during breaks.
The analytics dashboard is extremely important and must include comprehensive data visualization. I need a bar chart showing hours worked per day over the last seven days, with each day labeled by name and the bars showing decimal hours of focus time. Include a pie chart displaying task completion statistics with different colored segments for completed versus pending tasks, showing both the labels and numerical values. Create a today's summary section with large, bold statistics showing the number of Pomodoros completed today, total focus time in hours, and task completion ratios. Add a quick stats sidebar that displays total lifetime sessions, overall task completion ratios, and cumulative hours worked across all time. Include a recent sessions list showing the last five completed Pomodoros with their duration and timestamp.
The entire interface should be built with modern, responsive design principles using a three-section layout. The header should contain the app title, navigation tabs for Timer, Tasks, and Analytics views, and a settings button with a gear icon. The main content area should take up about two-thirds of the screen width and display different content based on which tab is active - either the timer interface with large countdown display and controls, the task management list with input fields, or the analytics dashboard with all the charts and statistics. The sidebar should occupy the remaining third of the screen and always display quick stats and recent sessions regardless of which main view is active.
In the settings panel, which should toggle open and closed when clicking the gear icon, include the theme selector with all five color options, number inputs for customizing work duration between one and sixty minutes, and break duration inputs between one and thirty minutes. These duration changes should update the timer immediately if it's not currently running, and the settings should persist throughout the user's session.
The timer interface itself needs prominent visual design with the countdown displayed in very large font size, clear indicators showing whether you're in focus time or break time, and three main control buttons for play, pause, and reset. The play button should toggle to a pause icon when the timer is running. Below the timer controls, include the music player interface with the genre selector dropdown and playback controls. Position the motivational quote card prominently below the music controls in an eye-catching design with borders and gradient backgrounds.
For the technical implementation, use React with functional components and hooks including useState for state management, useEffect for the timer interval logic and lifecycle management, and useRef for audio element references. Integrate the Recharts library for all data visualizations including the BarChart component for daily hours with CartesianGrid, XAxis, YAxis, and Tooltip components, and PieChart with Pie and Cell components for task statistics. Use Lucide React for all icons throughout the interface including Play, Pause, RotateCcw, Plus, Trash2, Check, Settings, BarChart3, Clock, Music, Volume2, and VolumeX. Style everything with Tailwind CSS utility classes, using responsive modifiers like md: for tablet and desktop layouts, and ensure the design is mobile-friendly with appropriate breakpoints.
The alarm sound should be generated using the Web Audio API, creating an AudioContext with an oscillator that produces a sine wave at 800Hz frequency, controlled by a gain node that fades from 0.3 to 0.01 over one second for a pleasant notification sound. All session data including date, time, duration, and timestamps should be stored in a sessions array in component state. Similarly, tasks should be stored as objects containing unique IDs, text content, and completion status booleans.
Make sure the interface has smooth transitions and hover effects on interactive elements, generous padding and spacing for breathing room, rounded corners on all cards and buttons using Tailwind's rounded utility classes, drop shadows for depth and elevation, and a clean gradient background for the main page container. The color scheme should feel modern and professional while being visually comfortable for extended use during long work sessions.
The entire application should be self-contained and work immediately without requiring external backend services, though it should be architected in a way that makes it easy to add API integration later for data persistence, user accounts, and cloud synchronization. Include helpful empty states with friendly messages when there are no tasks or sessions yet, and ensure all user actions provide immediate visual feedback. The app should feel responsive, polished, and professional while maintaining a warm, encouraging atmosphere that motivates productivity rather than adding stress.